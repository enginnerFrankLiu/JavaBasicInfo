
知识体系中的大纲和目录---分布式的各种知识--微服务

1.分布式和SOA 区别

2.如何合理的拆分我们的业务和数据库

3.分布式事务的实现

4.分布式锁的实现

5.API 幂等性的考虑

6.API 的认证和授权问题

7.订单ID的合理生成.

8.系统的高可用



系统的高可用：
如：redis mq service 站点等等.
高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间;
常见的方式：冗余+自动故障转移来 保证系统的高可用特性

分布式事务的几种实现方式
1.https://www.cnblogs.com/chengxy-nds/p/14046856.html

2.基于ROCKMQ的消息事务
https://juejin.cn/post/6844904106532962311

事务日志,事务基本概念
3.https://draveness.me/distributed-transaction-principle/

pxoas 算法
https://www.jdon.com/artichect/paxos.html


1.分布式锁的实现

 基于MY_SQL 的简单实现
 table-> method name or resource name
 第一种: 利用DB的唯一性约束
        往table中插入数据，由于DB的唯一性约束，有且只有一个条insert 语句能够操作成功，
        操作成功的request，进行后续的业务逻辑，业务执行完毕之后，删除orderId的数据.
        失败的就直接返回：系统繁忙，稍后再试;

        致命的缺点：
         1.不具备排队等候性(堵塞性)，其他的request 通通获取资源失败，而抛异常
         2.不具备超时机制
         3.没有重入性

第二种实现方式: 利用DB的排它锁来实现(数据库中的排它锁，是不能与任何形式的锁共存的)
connection.setAutoCommit(false)
  var row= SELECT * FROM TABLE WHERE METHOD_NAME='ADD_MONEY()' FOR UPDATE
if(row!=null){
  获取成功之后，执行业务逻辑
  connection.commit(); //释放锁;
}


第三种实现方式：利用乐观并发机制来实现：
给消息增加一个类似数据库的version字段，在每次消费更新的时候比较当前数据的版本号是否与消息中带的版本号一致，来判断是否执行消费
https://blog.csdn.net/u013256816/article/details/92854794

总结：
以上的方式都是一种“土办法”，都不是一个完整的，较为完美的分布式锁的实现方式;
分布式锁的原理实际上很容易理解，难的是如何在具体业务场景上选择最合适的方案


幂等性的考虑:
第一个是要考虑的就是，操作本事是否具备幂等性，如果操作本身就是幂等的，重复操作多次，并不会带来什么影响
如   select * where id=11
    delete from table where id=11
    update user set status=1 where id=11;

但是某些操作的重复操作就会带来“重复的效果”
如 insert 操作
简单粗暴,直接利用DB 唯一性约束来实现；如某个字段的唯一性约束：身份证ID
如 update account set money-money-100 where id=11;

你得想办法，标识中每一次操作（让每一操作都带有唯一性标识）；确保每一次操作只能执行一次;

先设置operationId 的唯一性约束.
insert operationId into operationLog values(“全局的唯一性ID”)
能够插入成功，那么说明就是第一个操作；

总结：
1.天生就幂等
2.为每一次操作，标识全局性唯一ID,确保这个ID，只能操作一次；

